import streamlit as st
import logging
from db import init_db
import utils
from auth import login, register
from booking import booking_page
from admin import admin_page

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler("app.log", encoding="utf-8"),
        logging.StreamHandler(),
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
for key, val in [("logged_in", False), ("username", ""), ("role", "")]:
    st.session_state.setdefault(key, val)

st.title("–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–∂–µ–∫ –≤ –±–∞—Å—Å–µ–π–Ω–µ")

if not st.session_state["logged_in"]:
    action = st.selectbox("–î–µ–π—Å—Ç–≤–∏–µ", ["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    if action == "–í–æ–π—Ç–∏":
        login()
    else:
        register()
else:
    st.sidebar.write(f"üë§ **{st.session_state['username']}** ({st.session_state['role']})")
    if st.sidebar.button("–í—ã—Ö–æ–¥"):
        user = st.session_state["username"]
        st.session_state.update(logged_in=False, username="", role="")
        logger.info(f"User '{user}' logged out")
        utils.safe_rerun()

    if st.session_state["role"] == "admin":
        admin_page()
    else:
        booking_page()