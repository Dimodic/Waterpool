import streamlit as st
st.set_page_config(layout='wide')
import pandas as pd
import utils
from datetime import time as dt_time, date as dt_date

def admin_page():
    st.sidebar.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    section = st.sidebar.radio("–†–∞–∑–¥–µ–ª", [
        "–°–ª–æ—Ç—ã",
        "–¢—Ä–µ–Ω–µ—Ä—ã",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    ])

    if section == "–°–ª–æ—Ç—ã":
        manage_timeslots()
    elif section == "–¢—Ä–µ–Ω–µ—Ä—ã":
        manage_trainers()
    elif section == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤":
        manage_trainer_schedule()
    elif section == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        manage_users()
    elif section == "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
        manage_bookings()

def manage_timeslots():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏")
    current = utils.list_timeslots()
    st.write("–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:", ", ".join(current) if current else "‚Äî")

    new_time = st.time_input("–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—á—á:–º–º)", value=dt_time(9, 0), key="new_timeslot")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç"):
        if utils.add_timeslot(new_time):
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω {new_time.strftime('%H:%M')}")
            utils.safe_rerun()
        else:
            st.warning("–¢–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –µ—Å—Ç—å.")

    if current:
        rem = st.selectbox("–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", current, key="rem_timeslot")
        if st.button("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç"):
            utils.remove_timeslot(rem)
            st.success(f"–£–¥–∞–ª—ë–Ω {rem}")
            utils.safe_rerun()

    st.markdown("---")
    st.subheader("–ó–∞–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –¥–∞—Ç—É")
    sel_date = st.date_input("–î–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏", value=dt_date.today(), key="closed_slots_date")
    closed = utils.list_closed_slots(sel_date)
    if closed:
        st.write("–ó–∞–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
        header_cols = st.columns([2,2,4,1])
        for col, text in zip(header_cols, ["–í—Ä–µ–º—è", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–£–¥–∞–ª–∏—Ç—å"]):
            col.write(text)
        for row in closed:
            cols = st.columns([2,2,4,1])
            with cols[0]:
                st.write(row["time"])
            with cols[1]:
                st.write(str(row["date"]))
            with cols[2]:
                st.write(row["comment"] or "")
            with cols[3]:
                if st.button("üóëÔ∏è", key=f"del_closed_{row['id']}"):
                    utils.remove_closed_slot(row["id"])
                    st.success("–°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                    utils.safe_rerun()
    else:
        st.info("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")

    st.markdown("---")
    st.subheader("–ó–∞–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –¥–∞—Ç—É –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É")
    col1, col2 = st.columns(2)
    with col1:
        start_time = st.selectbox("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–∑–∞–∫—Ä—ã—Ç—å —Å)", current, key="closed_start_time")
    with col2:
        end_time = st.selectbox("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ (–∑–∞–∫—Ä—ã—Ç—å –ø–æ)", current, index=len(current)-1, key="closed_end_time")
    comment = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", key="closed_comment")
    if st.button("–ó–∞–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"):
        start_idx = current.index(start_time)
        end_idx = current.index(end_time)
        if start_idx > end_idx:
            st.warning("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞!")
        else:
            count = utils.add_closed_slots_range(sel_date, start_time, end_time, comment)
            if count:
                st.success(f"–ó–∞–∫—Ä—ã—Ç–æ {count} –∏–Ω—Ç–µ—Ä–≤–∞–ª(–æ–≤) –Ω–∞ {sel_date}")
                utils.safe_rerun()
            else:
                st.warning("–ù–∏ –æ–¥–∏–Ω —Å–ª–æ—Ç –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)")

def manage_trainers():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏")
    trainers = utils.list_trainers()
    st.write("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–Ω–µ—Ä—ã:", ", ".join(trainers) if trainers else "‚Äî")

    new_tr = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞", key="new_trainer")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"):
        if utils.add_trainer(new_tr):
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–Ω–µ—Ä {new_tr}")
            utils.safe_rerun()
        else:
            st.warning("–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å.")

    if trainers:
        rem_tr = st.selectbox("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", trainers, key="rem_trainer")
        if st.button("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"):
            utils.remove_trainer(rem_tr)
            st.success(f"–¢—Ä–µ–Ω–µ—Ä {rem_tr} —É–¥–∞–ª—ë–Ω")
            utils.safe_rerun()

def manage_trainer_schedule():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤")
    trainers  = utils.list_trainers()
    trainer   = st.selectbox("–¢—Ä–µ–Ω–µ—Ä", trainers, key="sch_trainer")
    schedules = utils.list_trainer_schedule()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
    filtered = [s for s in schedules if s["trainer"] == trainer]
    if filtered:
        df = pd.DataFrame(filtered)
        header_cols = st.columns([2,2,2,2,1])
        headers = ["–¢—Ä–µ–Ω–µ—Ä", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è", "ID", "–£–¥–∞–ª–∏—Ç—å"]
        for col, text in zip(header_cols, headers):
            col.write(text)
        day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        for i, row in df.iterrows():
            cols = st.columns([2,2,2,2,1])
            with cols[0]:
                st.write(row["trainer"])
            with cols[1]:
                st.write(day_names[row["day_of_week"]])
            with cols[2]:
                st.write(row["time"])
            with cols[3]:
                st.write(row["id"])
            with cols[4]:
                if st.button("üóëÔ∏è", key=f"del_sched_{row['id']}"):
                    utils.remove_trainer_schedule(row["id"])
                    st.success("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                    utils.safe_rerun()
    else:
        st.info("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.")

    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day       = st.selectbox("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", day_names, key="sch_day")
    timeslots = utils.list_timeslots()
    col_time1, col_time2 = st.columns(2)
    with col_time1:
        start_time = st.selectbox("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", timeslots, key="sch_time_start")
    with col_time2:
        end_time = st.selectbox("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞", timeslots, index=len(timeslots)-1, key="sch_time_end")
    dow_map = {name: idx for idx, name in enumerate(day_names)}
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
        start_idx = timeslots.index(start_time)
        end_idx = timeslots.index(end_time)
        if start_idx > end_idx:
            st.warning("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞!")
        else:
            ok_all = True
            for t in timeslots[start_idx:end_idx+1]:
                ok = utils.add_trainer_schedule(trainer, dow_map[day], t)
                ok_all = ok_all and ok
            if ok_all:
                st.success("–ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                utils.safe_rerun()
            else:
                st.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

def manage_users():
    st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    users = utils.list_users()
    df = pd.DataFrame(users)
    search = st.text_input("–ü–æ–∏—Å–∫", key="user_search")
    if search:
        mask = df.apply(lambda row: row.astype(str)
                        .str.contains(search, case=False).any(), axis=1)
        df = df[mask]
    if df.empty:
        st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    header_cols = st.columns([3,2,2,3,2,2,2,2,2])
    headers = [
        "–õ–æ–≥–∏–Ω", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–†–æ–ª—å", "–°—Ç–∞—Ç—É—Å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"
    ]
    for col, text in zip(header_cols, headers):
        col.write(text)
    # –î–∞–Ω–Ω—ã–µ
    for i, row in df.iterrows():
        color_class = "confirmed" if row["is_confirmed"] else "not-confirmed"
        with st.container():
            cols = st.columns([3,2,2,3,2,2,2,2,2])
            with cols[0]:
                st.write(row["username"])
            with cols[1]:
                st.write(row["first_name"])
            with cols[2]:
                st.write(row["last_name"])
            with cols[3]:
                st.write(row["email"])
            with cols[4]:
                st.write(row["phone"])
            with cols[5]:
                st.write(row["role"])
            with cols[6]:
                st.write("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if row["is_confirmed"] else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            with cols[7]:
                if not row["is_confirmed"]:
                    if st.button("\u2705", key=f"confirm_{row['id']}"):
                        utils.confirm_user(row["id"])
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row['username']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                        utils.safe_rerun()
            with cols[8]:
                if row["username"] != "admin":
                    if st.button("\U0001F5D1", key=f"delete_{row['id']}"):
                        utils.remove_user(row["id"])
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row['username']} —É–¥–∞–ª–µ–Ω")
                        utils.safe_rerun()

def manage_bookings():
    st.subheader("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å")
    from datetime import date as dt_date
    sel_date = st.date_input("–î–∞—Ç–∞", value=dt_date.today(), key="admin_bookings_date")
    all_bookings = utils.list_all_bookings_for_date(sel_date)
    if not all_bookings:
        st.info("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    header_cols = st.columns([2,2,2,2,2,2,1])
    headers = [
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–î–æ—Ä–æ–∂–∫–∞", "–¢—Ä–µ–Ω–µ—Ä", "ID", "–£–¥–∞–ª–∏—Ç—å"
    ]
    for col, text in zip(header_cols, headers):
        col.write(text)
    # –î–∞–Ω–Ω—ã–µ
    for row in all_bookings:
        cols = st.columns([2,2,2,2,2,2,1])
        with cols[0]:
            st.write(row["user"])
        with cols[1]:
            st.write(str(row["date"]))
        with cols[2]:
            st.write(row["time"])
        with cols[3]:
            st.write(row["lane"])
        with cols[4]:
            st.write(row["trainer"])
        with cols[5]:
            st.write(row["id"])
        with cols[6]:
            if st.button("üóëÔ∏è", key=f"admin_del_booking_{row['id']}"):
                utils.remove_booking(row["id"])
                st.success("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                utils.safe_rerun()
