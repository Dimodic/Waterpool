# admin.py
import streamlit as st
import pandas as pd
import utils
from datetime import datetime, timedelta, date as dt_date

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ—Ç–æ–≤ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
@st.cache_data(ttl=300)
def get_timeslots_admin():
    return utils.list_timeslots()

@st.cache_data(ttl=300)
def get_closed_map(week_start_iso):
    week_start = datetime.fromisoformat(week_start_iso).date()
    week_dates = [week_start + timedelta(days=i) for i in range(7)]
    closed_map = {}
    for single_date in week_dates:
        for item in utils.list_closed_slots(single_date):
            closed_map[(item["date"], item["time"])] = item["id"]
    return closed_map

@st.cache_data(ttl=300)
def get_booking_map(week_start_iso):
    week_start = datetime.fromisoformat(week_start_iso).date()
    booking_map = set()
    for i in range(7):
        single_date = week_start + timedelta(days=i)
        for b in utils.list_all_bookings_for_date(single_date):
            booking_map.add((b["date"], b["time"]))
    return booking_map

def admin_page():
    st.sidebar.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    section = st.sidebar.radio("–†–∞–∑–¥–µ–ª", [
        "–°–ª–æ—Ç—ã",
        "–¢—Ä–µ–Ω–µ—Ä—ã",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    ])

    if section == "–°–ª–æ—Ç—ã":
        manage_timeslots()
    elif section == "–¢—Ä–µ–Ω–µ—Ä—ã":
        manage_trainers()
    elif section == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤":
        manage_trainer_schedule()
    elif section == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        manage_users()
    elif section == "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
        manage_bookings()

# ------------------ –ù–µ–¥–µ–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ --------------------
def manage_timeslots():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ (–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã)")

    if "week_start_admin" not in st.session_state:
        today = dt_date.today()
        st.session_state.week_start_admin = today - timedelta(days=today.weekday())

    nav1, nav2, nav3 = st.columns([1, 1, 3])
    with nav1:
        if st.button("<< –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", key="admin_prev_week"):
            st.session_state.week_start_admin -= timedelta(days=7)
            get_closed_map.clear()
            get_booking_map.clear()
            utils.safe_rerun()
    with nav2:
        if st.button("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è >>", key="admin_next_week"):
            st.session_state.week_start_admin += timedelta(days=7)
            get_closed_map.clear()
            get_booking_map.clear()
            utils.safe_rerun()
    with nav3:
        picked = st.date_input(
            label="–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –¥–∞—Ç—É –Ω–µ–¥–µ–ª–∏",
            value=st.session_state.week_start_admin,
            key="pick_date_for_week_admin"
        )
        if picked != st.session_state.week_start_admin:
            st.session_state.week_start_admin = picked - timedelta(days=picked.weekday())
            get_closed_map.clear()
            get_booking_map.clear()
            utils.safe_rerun()

    week_start_iso = st.session_state.week_start_admin.isoformat()
    week_dates = [st.session_state.week_start_admin + timedelta(days=i) for i in range(7)]
    day_labels = [
        d.strftime("%d.%m") + " " + ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"][d.weekday()]
        for d in week_dates
    ]

    timeslots = get_timeslots_admin()
    closed_map = get_closed_map(week_start_iso)
    booking_map = get_booking_map(week_start_iso)

    # –°—Ç—Ä–æ–∏–º —Ç–∞–±–ª–∏—Ü—É: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header_cols = st.columns([1] + [1]*7)
    header_cols[0].write("–í—Ä–µ–º—è")
    for idx, label in enumerate(day_labels):
        header_cols[idx+1].write(label)

    for t in timeslots:
        row_cols = st.columns([1] + [1]*7)
        row_cols[0].write(t)
        for idx, single_date in enumerate(week_dates):
            cell_key = f"cell_admin_{single_date}_{t}"
            if (single_date, t) in closed_map:
                if row_cols[idx+1].button("‚ùå", key=cell_key):
                    utils.remove_closed_slot(closed_map[(single_date, t)])
                    get_closed_map.clear()
                    get_booking_map.clear()
                    st.success(f"–°–ª–æ—Ç {t} –Ω–∞ {single_date} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    utils.safe_rerun()
            elif (single_date, t) in booking_map:
                row_cols[idx+1].write("üìå")
            else:
                row_cols[idx+1].write("")

    st.markdown("---")
    st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π —Å–ª–æ—Ç")
    add_date = st.date_input(
        label="–î–∞—Ç–∞ —Å–ª–æ—Ç–∞",
        value=dt_date.today(),
        key="add_closed_date_admin"
    )
    add_time = st.selectbox(
        label="–í—Ä–µ–º—è —Å–ª–æ—Ç–∞",
        options=timeslots,
        key="add_closed_time_admin"
    )
    add_comment = st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", key="add_closed_comment_admin")

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π —Å–ª–æ—Ç"):
        ok = utils.add_closed_slot(add_date, add_time, add_comment)
        if ok:
            get_closed_map.clear()
            st.success(f"–°–ª–æ—Ç {add_time} –Ω–∞ {add_date} –∑–∞–∫—Ä—ã—Ç")
            utils.safe_rerun()
        else:
            st.warning("–¢–∞–∫–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π —Å–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# ------------------ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏ –∏ –ø—Ä–æ—á–µ–µ ----------------------------
def manage_trainers():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏")
    trainers = utils.list_trainers()
    st.write("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–Ω–µ—Ä—ã:", ", ".join(trainers) if trainers else "‚Äî")

    new_tr = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞", key="new_trainer")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"):
        if utils.add_trainer(new_tr):
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–Ω–µ—Ä {new_tr}")
            utils.safe_rerun()
        else:
            st.warning("–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å.")

    if trainers:
        rem_tr = st.selectbox("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞", trainers, key="rem_trainer")
        if st.button("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"):
            utils.remove_trainer(rem_tr)
            st.success(f"–¢—Ä–µ–Ω–µ—Ä {rem_tr} —É–¥–∞–ª—ë–Ω")
            utils.safe_rerun()

def manage_trainer_schedule():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤")
    st.session_state.setdefault("show_add_trainer_schedule", False)
    schedules = utils.list_trainer_schedule()
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    if schedules:
        header_cols = st.columns([2,2,2,1])
        for col, text in zip(header_cols, ["–¢—Ä–µ–Ω–µ—Ä", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è", "–£–¥–∞–ª–∏—Ç—å"]):
            col.write(text)

        for row in schedules:
            cols = st.columns([2,2,2,1])
            with cols[0]:
                st.write(row["trainer"])
            with cols[1]:
                st.write(day_names[row["day_of_week"]])
            with cols[2]:
                st.write(row["time"])
            with cols[3]:
                if st.button("üóëÔ∏è", key=f"del_sched_{row['id']}"):
                    utils.remove_trainer_schedule(row["id"])
                    st.success("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                    utils.safe_rerun()
    else:
        st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")

    st.markdown("---")
    if not st.session_state["show_add_trainer_schedule"]:
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
            st.session_state["show_add_trainer_schedule"] = True

    if st.session_state["show_add_trainer_schedule"]:
        st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        trainers = utils.list_trainers()
        if not trainers:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–¢—Ä–µ–Ω–µ—Ä—ã¬ª.")
        else:
            trainer = st.selectbox("–¢—Ä–µ–Ω–µ—Ä", trainers, key="new_sch_trainer")
            day = st.selectbox("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", day_names, key="new_sch_day")
            timeslots = get_timeslots_admin()
            col_time1, col_time2 = st.columns(2)
            with col_time1:
                start_time = st.selectbox("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", timeslots, key="new_sch_time_start")
            with col_time2:
                end_time = st.selectbox("–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞", timeslots, index=len(timeslots)-1, key="new_sch_time_end")
            dow_map = {name: idx for idx, name in enumerate(day_names)}

            col_btn1, col_btn2 = st.columns([1,1])
            with col_btn1:
                if st.button("–î–æ–±–∞–≤–∏—Ç—å", key="add_trainer_schedule_btn"):
                    start_idx = timeslots.index(start_time)
                    end_idx = timeslots.index(end_time)
                    if start_idx > end_idx:
                        st.warning("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Ü–∞!")
                    else:
                        ok_all = True
                        for tt in timeslots[start_idx:end_idx+1]:
                            ok = utils.add_trainer_schedule(trainer, dow_map[day], tt)
                            ok_all = ok_all and ok
                        if ok_all:
                            st.success("–ó–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                        else:
                            st.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.")
                        st.session_state["show_add_trainer_schedule"] = False
                        utils.safe_rerun()
            with col_btn2:
                if st.button("–û—Ç–º–µ–Ω–∞", key="cancel_trainer_schedule"):
                    st.session_state["show_add_trainer_schedule"] = False
                    utils.safe_rerun()

def manage_users():
    st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    users = utils.list_users()
    df = pd.DataFrame(users)
    search = st.text_input("–ü–æ–∏—Å–∫", key="user_search")
    if search:
        mask = df.apply(lambda row: row.astype(str).str.contains(search, case=False).any(), axis=1)
        df = df[mask]
    if df.empty:
        st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return

    header_cols = st.columns([3,2,2,3,2,2,2,2,2])
    headers = [
        "–õ–æ–≥–∏–Ω", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–†–æ–ª—å", "–°—Ç–∞—Ç—É—Å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"
    ]
    for col, text in zip(header_cols, headers):
        col.write(text)

    for _, row in df.iterrows():
        with st.container():
            cols = st.columns([3,2,2,3,2,2,2,2,2])
            with cols[0]:
                st.write(row["username"])
            with cols[1]:
                st.write(row["first_name"])
            with cols[2]:
                st.write(row["last_name"])
            with cols[3]:
                st.write(row["email"])
            with cols[4]:
                st.write(row["phone"])
            with cols[5]:
                st.write(row["role"])
            with cols[6]:
                st.write("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if row["is_confirmed"] else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            with cols[7]:
                if not row["is_confirmed"]:
                    if st.button("‚úÖ", key=f"confirm_{row['id']}"):
                        utils.confirm_user(row["id"])
                        get_closed_map.clear()
                        get_booking_map.clear()
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row['username']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                        utils.safe_rerun()
            with cols[8]:
                if row["username"] != "admin":
                    if st.button("üóëÔ∏è", key=f"delete_{row['id']}"):
                        utils.remove_user(row["id"])
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row['username']} —É–¥–∞–ª–µ–Ω")
                        utils.safe_rerun()

def manage_bookings():
    st.subheader("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å")
    sel_date = st.date_input("–î–∞—Ç–∞", value=dt_date.today(), key="admin_bookings_date")
    all_bookings = utils.list_all_bookings_for_date(sel_date)
    if not all_bookings:
        st.info("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return

    header_cols = st.columns([2,2,2,2,2,2,1])
    headers = [
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–î–æ—Ä–æ–∂–∫–∞", "–¢—Ä–µ–Ω–µ—Ä", "ID", "–£–¥–∞–ª–∏—Ç—å"
    ]
    for col, text in zip(header_cols, headers):
        col.write(text)

    for row in all_bookings:
        cols = st.columns([2,2,2,2,2,2,1])
        with cols[0]:
            st.write(row["user"])
        with cols[1]:
            st.write(str(row["date"]))
        with cols[2]:
            st.write(row["time"])
        with cols[3]:
            st.write(row["lane"])
        with cols[4]:
            st.write(row["trainer"])
        with cols[5]:
            st.write(row["id"])
        with cols[6]:
            if st.button("üóëÔ∏è", key=f"admin_del_booking_{row['id']}"):
                utils.remove_booking(row["id"])
                st.success("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                utils.safe_rerun()
